@startuml State Machine

abstract class StateController {
  -characterController
}

class playerController {
  - StateMachine

  - pollInputs()
}

class StateMachine {
  + StateSO currentState

  + StateUpdate()
  + SetState(StateSO)
}

class StateSO {
  -StateController
  -intangible: false
  -invinsible: false
  -allowInputs: false

  - List<StateSO> allowedStates
  - List<StateBehavior> behaviors
  - List<Resetters> resetters
}

enum Resetters {
  ANIMATION
  VELOCITY

  - atStart()
  - atEnd()
}

enum Conditions {
  ANIM_END
  BUTTON_PRESS
  BUTTON_RELEASE
  TIMER
}

interface StateBehavior {
  + Begin()
  + Update()
  + End()
  + OnAnimationEnd()
  + OnCollision()
}

abstract class AllowPhysics {
  - moveSpeed
  - canGravity

  + playerMove()
}

class Dash {
  -canMove: false
  -startUpTime
  -startUpAnim
  -dashSpeed
  -dashDirection
  -dashDuration
  -dashAnim
  -CancelCriteria

  +performDash(): async
}

Dash . Resources

class Broom {
  +costResource()
}

enum Resources {
  MANA
  BROOM
  MATERIAL
}

class Bounce {
  - freeMove: true
}

class Jump {
  +varyHeight()
}

abstract class AllowPlayerInput {
  -allowInputs: true
  -canMove: true

  +doMove()
}

class FreeMove {
  -canMove: true
}

class Attack {
  -AttackData

  +createHitBox()
  +checkCombo()
}

Attack .. Resources

class Bonk {
  -invinsible: true

  +setVelocity()
}

class Wait {
  -intangible: true
  -invinsible: true
}

class Hurt {
  -costResource()
}

Hurt .. Resources

class Reset {
  -lerpPath()
}

StateController <|-- playerController
StateMachine *- StateController
StateMachine <--- StateSO
StateSO "1" -- "0.." StateBehavior
Resetters . StateSO

StateBehavior <|-- AllowPhysics
AllowPhysics <|-- AllowPlayerInput

AllowPlayerInput <|-- FreeMove
AllowPlayerInput <|-- Attack
AllowPlayerInput <|-- Dash
Dash <|-- Broom
Dash <|-- Bounce
Bounce <|-- Jump

AllowPhysics <|-- Bonk
Bonk <|-- Hurt
AllowPhysics <|-- WaitMoveable

Wait <|-- Reset
StateBehavior <|-- Wait

Wait . Conditions
Conditions . Dash
@enduml